library(shiny); runApp('Hacking.R')
dat <- readr::read_csv("/home/tj/Documents/Data/R Directories/AlleleBinning/Data_Files/Tilia.csv")
SSRr::sat_SSRr(dat)
SSRr::sat_SSRr(dat, 2)
SSRr::sat_assign
remove.packages(SSRr)
remove.packages("SSRr")
library(SSRr)
SSRr::sat_SSRr(dat, 2)
repo <- SSRr::sat_SSRr(dat, 2)
SSRr::sat_getBinned(repo)
library(SSRr)
library(shiny)
runApp('Hacking.R')
runApp('Hacking.R')
# Define server logic to read selected file ----
server <- function(input, output) {
output$contents <- renderTable({
# input$file1 will be NULL initially. After the user selects
# and uploads a file, head of that data file by default,
# or all rows if selected, will be shown.
req(input$file1)
df <- read.csv(input$file1$datapath,
header = input$header,
sep = input$sep,
quote = input$quote)
if(input$disp == "head") {
return(head(df))
}
else {
return(df)
}
})
}
# Define UI for data upload app ----
ui <- fluidPage(
# App title ----
titlePanel("Uploading Files"),
# Sidebar layout with input and output definitions ----
sidebarLayout(
# Sidebar panel for inputs ----
sidebarPanel(
# Input: Select a file ----
fileInput("file1", "Choose CSV File",
multiple = TRUE,
accept = c("text/csv",
"text/comma-separated-values,text/plain",
".csv")),
# Horizontal line ----
tags$hr(),
# Input: Checkbox if file has header ----
checkboxInput("header", "Header", TRUE),
# Input: Select separator ----
radioButtons("sep", "Separator",
choices = c(Comma = ",",
Semicolon = ";",
Tab = "\t"),
selected = ","),
# Input: Select quotes ----
radioButtons("quote", "Quote",
choices = c(None = "",
"Double Quote" = '"',
"Single Quote" = "'"),
selected = '"'),
# Horizontal line ----
tags$hr(),
# Input: Select number of rows to display ----
radioButtons("disp", "Display",
choices = c(Head = "head",
All = "all"),
selected = "head")
),
# Main panel for displaying outputs ----
mainPanel(
# Output: Data file ----
tableOutput("contents")
)
)
)
shinyApp(ui, server)
shinyApp(ui, server)
# Define server logic to read selected file ----
server <- function(input, output) {
output$contents <- renderTable({
# input$file1 will be NULL initially. After the user selects
# and uploads a file, head of that data file by default,
# or all rows if selected, will be shown.
req(input$file1)
df <- read.csv(input$file1$datapath,
header = input$header,
sep = input$sep,
quote = input$quote)
`%>%` <- magrittr::`%>%`
out <- SSRr::sat_SSRr(df, 2) %>%
SSRr::sat_getBinned()
if(input$disp == "head") {
return(head(out))
}
else {
return(out)
}
})
}
shinyApp(ui, server)
runApp('Hacking.R')
runApp('Hacking.R')
library(shiny); runApp('Hacking.R')
runApp('Hacking.R')
runApp('Hacking.R')
ui <- fluidPage(
# App title ----
titlePanel("Allele Binning with SSRr"),
# Tabset layout ----
tabsetPanel(
# Define upload and binning tab ----
tabPanel("Bin data",
# Tab title ----
titlePanel("Upload and bin dataset"),
# Sidebar layout with input and output definitions ----
sidebarLayout(
# Sidebar panel for inputs ----
sidebarPanel(
# Input: Select a file ----
fileInput("file1", "Choose CSV File",
multiple = TRUE,
accept = c("text/csv",
"text/comma-separated-values,text/plain",
".csv")),
# Horizontal line ----
tags$hr(),
# Input: Silder select ploidy ----
sliderInput("ploidy", "Ploidy Level", min = 1, max = 6, value = 2, step = 1),
# Horizontal line ----
tags$hr(),
# Input: Checkbox if file has header ----
checkboxInput("header", "Header", TRUE),
# Input: Select separator ----
radioButtons("sep", "Separator",
choices = c(Comma = ",",
Semicolon = ";",
Tab = "\t"),
selected = ","),
# Input: Select quotes ----
radioButtons("quote", "Quote",
choices = c(None = "",
"Double Quote" = '"',
"Single Quote" = "'"),
selected = '"'),
# Horizontal line ----
tags$hr(),
# Input: Select number of rows to display ----
radioButtons("disp", "Display",
choices = c(Head = "head",
All = "all"),
selected = "head")
),
# Main panel for displaying outputs ----
mainPanel(
# Output: Data file ----
tableOutput("contents")
)
)
),
# Define plot tab ----
tabPanel("Plot Data",
# Tab Title ----
titlePanel("Plot density of mirosatilite loci"),
# Sidebar layout with input and output definitions ----
sidebarLayout(
# Sidebar panle for input ----
sidebarPanel(
# Input: Select a locus ----
selectInput("locus", "Select a locus", output$names)
),
# Output: Density plot ----
plotOutput("plot")
))
)
)
runApp('Hacking.R')
runApp('Hacking.R')
runApp('Hacking.R')
runApp('Hacking.R')
out <- SSRr::sat_getBinned(repo)
runApp('Hacking.R')
runApp('Hacking.R')
runApp('Hacking.R')
runApp('Hacking.R')
runApp('Hacking.R')
runApp('Hacking.R')
runApp('Hacking.R')
runApp('Hacking.R')
rm(repo)
runApp('Hacking.R')
runApp('Hacking.R')
runApp('Hacking.R')
runApp('Hacking.R')
runApp('Hacking.R')
runApp('Hacking.R')
runApp('Hacking.R')
runApp('Hacking.R')
rm(dat, out)
r()
rm(r)
runApp('Hacking.R')
library(shiny); runApp('Hacking.R')
remove.packages("SSRr")
runApp('Hacking.R')
SSRr::sat_plot
library(SSRs)
library(SSRr)
sat_plot
SSRr::sat_plot
library(shiny); runApp('Hacking.R')
runApp('Hacking.R')
library(shiny); runApp('Hacking.R')
runApp('Copying.R')
runApp('Copying.R')
runApp('Copying.R')
runApp('Copying.R')
runApp('Copying.R')
runApp('Copying.R')
runApp('Copying.R')
runApp('Copying.R')
runApp('Copying.R')
runApp('Copying.R')
library(shiny); runApp('Copying.R')
runApp('Copying.R')
runApp('Copying.R')
runApp('Copying.R')
runApp('Copying.R')
runApp('Copying.R')
library(shiny); runApp('Copying.R')
runApp('Copying.R')
runApp('Copying.R')
runApp('Copying.R')
runApp('Copying.R')
runApp('Copying.R')
runApp('Copying.R')
runApp('Copying.R')
runApp('Copying.R')
runApp('Copying.R')
runApp('Copying.R')
runApp('Copying.R')
runApp('Copying.R')
repo <- reactiveValues(repo)
repo <- reactiveValues("repo" = repo)
View(repo)
repo <- reactiveValues("repo" = NULL)
runApp('test.R')
runApp('test.R')
runApp('test.R')
runApp('test.R')
runApp('test.R')
runApp('test.R')
runApp('test.R')
runApp('test.R')
runApp('test.R')
runApp('test.R')
runApp('test.R')
runApp('test.R')
runApp('test.R')
runApp('test.R')
runApp('test.R')
runApp('test.R')
runApp('test.R')
runApp('test.R')
runApp('test.R')
runApp('test.R')
options(expressions=)
runApp('test.R')
runApp('test.R')
runApp('test.R')
runApp('test.R')
runApp('test.R')
runApp('test.R')
runApp('test.R')
runApp('test.R')
runApp('test.R')
runApp('test.R')
runApp('test.R')
runApp('test.R')
runApp('test.R')
runApp('test.R')
runApp('test.R')
runApp('test.R')
runApp('test.R')
install.packages("devtools")
install_github("plantarum/binner")
devtools::install_github("plantarum/binner")
binner
runApp('test.R')
library(shiny); runApp('test.R')
library(MicroBinner)
